package homework10.basic;

import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

public class Basic {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		System.out.println(add('c', 2));
	}

    // 2. public static <T> String add(T t1, T t2) 제네릭 메소드를 정의하고 매개변수로 어떤 값이 들어오던 문자열 결합연산이 돼서 스트링값으로 리턴하도록 만드세요.
	public static <T> String add(T t1, T t2) {
		return t1.toString() + t2.toString();
	}
	
	// 3. public static Integer sum(List<?> list) 와일드 카드를 이용하여 리스트의 총합을 구하는 메소드를 구현하세요.
	public static Integer sum(List<?> list) {
		int sum = 0;
		
		for(int i = 0; i < list.size(); i++) {
			sum += Integer.parseInt(list.get(i).toString());
		}
		
		return sum;
	}
	
	// 4. 어떤 배열이던지 받아서 인덱스가 3의 배수인 요소만 출력하는 메소드 void printArr을 구현하세요.(와일드 카드 사용)
	public static void printArr(List<?> inputList) {
		
		for(int i = 0; i < inputList.size(); i++) {
			if(i % 3 == 0) {
				System.out.println("인덱스가 3의 배수로 출력합니다. " + i + "-> " + inputList.get(i));
			}
		}
	}
	
	// 5. Number를 상속받은 클래스타입의 배열만 받아서 배열의 최소값을 구해서 리턴하는 메소드 getMin을 구현하세요.
	public static <T extends Number> T getMin(T[] TClassArr) {
		T minNum = null;
		
		for(int i = 0; i < TClassArr.length; i++) {
			if(TClassArr[i].intValue() < minNum.intValue()) {
				minNum = TClassArr[i];
			}
		}
		
		return minNum;
	}
	
	// 6. Map을 어떤형태로든 받아서 value를 String으로 변경했을 때 길이가 10이상되는 key를 출력하는 메소드 void printOverTen을 구현하세요.
	public static <K, V> void printOverTen(Map<K, V> paramMap) {
		Iterator<Entry<K, V>> paramMapIterator = paramMap.entrySet().iterator();
		
		while(paramMapIterator.hasNext()) {
			Entry<K, V> tempEntry = paramMapIterator.next();
			if(tempEntry.getValue().toString().length() >= 10) {
				System.out.println(tempEntry.getKey() + "의 값은 value가 10이상인 key 값입니다.");
			}
		}
	}
}
